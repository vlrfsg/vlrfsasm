[def/common.txt
 Copyright 2021 vlrfsg]

[empty]
{c.emp; ; (: 0 0)}

[negate]
{c.neg A; ; (+ (! A) 1)}

[unsigned sub]
{- A B; ; (+ A (c.neg (: B (# A))))}

[get]
{c.getRan A B C; ; (: (> A B) C)}
{c.getBit A B; ; (c.getRan A B 1)}
{c.getSgn A; ;
  (?
    (# A)
    (c.getBit A (- (# A) 1))
    (: 0 1)
  )
}

[sign extend]
{:- A B; ;
  (?
    (|
      (! (c.getSgn A))
      (>= (# A) (: B 64))
    )
    (: A B)
    (' (! (: 0 (- (: B 64) (# A))) A))
  )
}

[signed add, sub]
{+- A B; ; (+ A (:- B (# A)))}
{-- A B; ; (- A (:- B (# A)))}

[unsigned compare]
{== A B; ; (: (? (^ A (: B (# A))) 1 0) 1)}
{!= A B; ; (^ (== A B) 1)}
{<! A B; ; (c.getSgn (- A B))}
{<= A B; ; (| (<! A B) (== A B))}
{>! A B; ; (! (<= A B))}
{>= A B; ; (! (<! A B))}

[signed compare]
{==- A B; ; (: (? (^ A (:- B (# A))) 1 0) 1)}
{!=- A B; ; (^ (==- A B) 1)}
{<!- A B; ; (c.getSgn (-- A B))}
{<=- A B; ; (| (<!- A B) (==- A B))}
{>!- A B; ; (! (<=- A B))}
{>=- A B; ; (! (<!- A B))}

[multiply]
{* A B; ;
  (:
    (*L B (' (: 0 (# A)) (- (# A) 1)) A)
    (# A)
  )
}
{*L A 1 B C; ;
  (?
    (: B 64)
    (c.emp)
    (+ (> B 64) (? A C 0))
  );
  ('
    (+ (> B 64) (? A (< C (: B 64)) 0))
    (- (: B 64) 1)
  )
}
{*- A B; ;
  (?
    (c.getSgn B)
    (* (c.neg A) (: (c.neg B) (# A)))
    (* A B)
  )
}

[divide]
{/ A B; ;
  (?
    B
    (: (/L A B (: 0 (# B))) (# A))
    (; "Division by zero")
  )
}
{/L A 1 B C; ;
  (>= (' C A) B);
  (:
    (?
      (>= (' C A) B)
      (- (' C A) B)
      (' C A)
    )
    (# B)
  )
}
{/- A B; ;
  (?
    (c.getSgn A)
    (?
      (c.getSgn B)
      (/ (c.neg A) (c.neg B))
      (c.neg (/ (c.neg A) B))
    )
    (?
      (c.getSgn B)
      (c.neg (/ A (c.neg B)))
      (/ A B)
    )
  )
}

[modulo: Undefined on signed number]
{% A B; ;
  (?
    B
    (: (%L A B (' (: 0 (# B)) (: (# A) 1))) (# B))
    (; "Division by zero")
  )
}
{%L A 1 B C; ;
  (?
    (: B 64)
    (c.emp)
    (?
      (>= (' (> B 64) A) C)
      (- (' (> B 64) A) C)
      (' (> B 64) A)
    )
  );
  ('
    (?
      (>= (' (> B 64) A) C)
      (- (' (> B 64) A) C)
      (' (> B 64) A)
    )
    (- (: B 64) 1)
  )
}

[align]
{c.align A B; ; (? (& A (- B 1)) (+ (^ A (& A (- B 1))) B) A)}
{c.alignS A B; ; (< A (- (c.align (# A) B) (# A)))}

[convert integer to string]
{c.cnvIC A; ;
  (? (<! A 10) (+ "0" A) (+ "A" (- A 10)))
}
{c.cnvISR A B; ;
  (?
    A
    (' (c.cnvISR (/ A B) B) (c.cnvIC (% A B)))
    (c.emp)
  )
}
{c.cnvIS A B; ; (? A (c.cnvISR A B) "0")}
{c.cnvIS- A B; ;
  (?
    (c.getSgn A)
    (' "-" (c.cnvIS (c.neg A) B))
    (c.cnvIS A B)
  )
}

[Convert utf-16 to utf-8]
{c.cnvCcS8 A; ;
  (?
    (>= $7F A)
    (: A 8)
    (?
      (>= $07FF A)
      ('
        (: %110 3) (c.getRan A 6 5)
        (: %10 2) (c.getRan A 0 6)
      )
      (?
        (>= $FFFF A)
        ('
          (: %1110 4) (c.getRan A 12 4)
          (: %10 2) (c.getRan A 6 6)
          (: %10 2) (c.getRan A 0 6)
        )
        ('
          (: %11110 5) (c.getRan A 18 3)
          (: %10 2) (c.getRan A 12 6)
          (: %10 2) (c.getRan A 6 6)
          (: %10 2) (c.getRan A 0 6)
        )
      )
    )
  )
}
{c.cnvSxS8L A 16 B; ;
  (?
    (== (c.getRan A 11 5) %11011)
    (c.cnvCcS8 A)
    (?
      (getBit A 10)
      (c.cnvCcS8 (- (' (: B 10) (: A 10)) $00010000))
      (c.empty)
    )
  );
  (?
    (== (c.getRan A 10 6) %110110)
    A
    0
  )
}
{c.cnvSxS8 A; ; (c.cnvSxS8L A 0)}

[String with null]
{c.cctSxN A; ; (' A (: 0 16))}
{c.cctS8N A; ; (' A (: 0 8))}

[Utf-16 change endian]
{c.chgEdnSxL A 16; ;
  (' (c.getRan A 0 8) (c.getRan A 8 8))
}
{c.chgEdnSx A; ; (c.chgEdnSxL A)}

[about vlrfsasm]
{c.verI; ; $000200}
{c.verS; ;
  ('
    (c.cnvIS (c.getRan (c.verI) 16 8))
    "."
    (c.cnvIS (c.getRan (c.verI) 8 8))
    "."
    (c.cnvIS (c.getRan (c.verI) 0 8))
  )
}
{c.nam; ; (' "Vlrfsasm v" (c.verS))}


