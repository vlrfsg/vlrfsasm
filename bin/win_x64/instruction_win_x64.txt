
#General function
($ = A B (! (% (^ A B))))
($ != A B (% (^ A B)))

#Register define function
($ reg S R (/ (| (< S 5) R) 8))
($ regE S R (/ (| (< S 5) (< 1 4) R) 8))

#Register size
($ sizeQ 3) ($ sizeD 2) ($ sizeW 1) ($ sizeB 0)

#Registers
($ AL (reg (sizeB) 0)) ($ AH (reg (sizeB) 4)) ($ AX (reg (sizeW) 0)) ($ EAX (reg (sizeD) 0)) ($ RAX (reg (sizeQ) 0))
($ CL (reg (sizeB) 1)) ($ CH (reg (sizeB) 5)) ($ CX (reg (sizeW) 1)) ($ ECX (reg (sizeD) 1)) ($ RCX (reg (sizeQ) 1))
($ DL (reg (sizeB) 2)) ($ DH (reg (sizeB) 6)) ($ DX (reg (sizeW) 2)) ($ EDX (reg (sizeD) 2)) ($ RDX (reg (sizeQ) 2))
($ BL (reg (sizeB) 3)) ($ BH (reg (sizeB) 7)) ($ BX (reg (sizeW) 3)) ($ EBX (reg (sizeD) 3)) ($ RBX (reg (sizeQ) 3))
($ SPL (regE (sizeB) 4)) ($ SP (reg (sizeW) 4)) ($ ESP (reg (sizeD) 4)) ($ RSP (reg (sizeQ) 4))
($ BPL (regE (sizeB) 5)) ($ BP (reg (sizeW) 5)) ($ EBP (reg (sizeD) 5)) ($ RBP (reg (sizeQ) 5))
($ SIL (regE (sizeB) 6)) ($ SI (reg (sizeW) 6)) ($ ESI (reg (sizeD) 6)) ($ RSI (reg (sizeQ) 6))
($ DIL (regE (sizeB) 7)) ($ DI (reg (sizeW) 7)) ($ EDI (reg (sizeD) 7)) ($ RDI (reg (sizeQ) 7))
($ R8L (reg (sizeB) 8)) ($ R8W (reg (sizeW) 8)) ($ R8D (reg (sizeD) 8)) ($ R8 (reg (sizeQ) 8))
($ R9L (reg (sizeB) 9)) ($ R9W (reg (sizeW) 9)) ($ R9D (reg (sizeD) 9)) ($ R9 (reg (sizeQ) 9))
($ R10L (reg (sizeB) $A)) ($ R10W (reg (sizeW) $A)) ($ R10D (reg (sizeD) $A)) ($ R10 (reg (sizeQ) $A))
($ R11L (reg (sizeB) $B)) ($ R11W (reg (sizeW) $B)) ($ R11D (reg (sizeD) $B)) ($ R11 (reg (sizeQ) $B))
($ R12L (reg (sizeB) $C)) ($ R12W (reg (sizeW) $C)) ($ R12D (reg (sizeD) $C)) ($ R12 (reg (sizeQ) $C))
($ R13L (reg (sizeB) $D)) ($ R13W (reg (sizeW) $D)) ($ R13D (reg (sizeD) $D)) ($ R13 (reg (sizeQ) $D))
($ R14L (reg (sizeB) $E)) ($ R14W (reg (sizeW) $E)) ($ R14D (reg (sizeD) $E)) ($ R14 (reg (sizeQ) $E))
($ R15L (reg (sizeB) $F)) ($ R15W (reg (sizeW) $F)) ($ R15D (reg (sizeD) $F)) ($ R15 (reg (sizeQ) $F))
($ RIP (regE (sizeD) 5))

#Type and Size function
($ opImm V
  (/ (> V 64) 1)
)

($ immSize V
  (/ 
    (? (| (= (/ (> V 31) 33) 0) (= (/ (> V 31) 33) $1FFFFFFFF))
      (? (| (= (/ (> V 15) 17) 0) (= (/ (> V 15) 17) $1FFFF))
        (? (| (= (/ (> V 7) 9) 0) (= (/ (> V 7) 9) $1FF))
          (? (= (/ V 8) 0)
            4
            0
          )
          1
        )
        2
      )
      3
    )
    3
  )
)

($ opSize V
  (/ (> V 5) 2)
)

($ opMem V
  (& (! (opImm V)) (/ (> V 7) 1))
)

($ opReg V
  (! (| (opImm V) (/ (> V 7) 1)))
)

($ opAcc V
  (& (opReg V) (= (/ M 5) 0))
)

($ opExt V
  (/
    (&
      (> V 3)
      (!
        (&
          (/ (> V 15) 1)
          (/ (= (/ M 5) $C) 1)
        )
      )
    )
    1
  )
)

($ opExtI V
  (? (/ (> V 15) 1)
    (/ (> V 11) 1)
    (/ (= (/ M 5) $C) 1)
  )
)

($ regWithRexE V
  (? (opMem V)
    (/ 0 1)
    (/ (> V 4) 1)
  )
)

($ regWithoutRexE V
  (=
    (/ (> V 2) 5)
    (/ %00001 5)
  )
)

#Value
($ m S R
  (? (= (opSize R) (sizeQ))
    (/ (| (< 1 7) (< S 5) (/ R 5)) 65)
    (; "Incomprehensible Register Size")
  )
)
($ md S R D
  (? (= (opSize R) (sizeQ))
    (/ (| (< (/ D 32) 32) (< 1 7) (< S 5) (/ R 5)) 65)
    (; "Incomprehensible Register Size")
  )
)
($ mid S R I D
  (? (& (= (opSize R) (sizeQ)) (= (opSize I) (sizeQ)))
    (/ (| (< (/ D 32) 32) (< 1 15) (< (/ I 5) 8) (< 1 7) (< S 5) (/ R 5)) 65)
    (; "Incomprehensible Register Size")
  )
)
($ msid S R Sc I D
  (? (& (= (opSize R) (sizeQ)) (= (opSize I) (sizeQ)))
    (/ (| (< (/ D 32) 32) (< 1 15) (< Sc 13) (< (/ I 5) 8) (< 1 7) (< S 5) (/ R 5)) 65)
    (; "Incomprehensible Register Size")
  )
)
($ ld R D)
($ lsid S Sc I D
  (?  (= (opSize I) (sizeQ))
    (/ (| (< (/ D 32) 32) (< 1 15) (< Sc 13) (< (/ I 5) 8) (< 1 7) (< S 5) (/ $10 5)) 65)
    (; "Incomprehensible Register Size")
  )
)

($ i I (' (/ 1 1) (/ I 64)))

(immResize I S
  (? (!= S 4)
    (? (= S 3)
      ('
        (/ I 8)
        (/ (> I 8) 8)
        (/ (> I 16) 8)
        (/ (> I 24) 8)
        (/ (> I 32) 8)
        (/ (> I 40) 8)
        (/ (> I 48) 8)
        (/ (> I 56) 8)
      )
      (? (= S 2)
        ('
          (/ I 8)
          (/ (> I 8) 8)
          (/ (> I 16) 8)
          (/ (> I 24) 8)
        )
        (? (= S 1)
          ('
            (/ I 8)
            (/ (> I 8) 8)
          )
          (/ I 8)
        )
      )
    )
  )
)

($ ib V
  (/ V 8)
)

($ iw V
  (immResize V 1)
)

($ id V
  (immResize V 2)
)

($ iq V
  (immResize V 3)
)

#Displacement

($ dispSize0 I
  (? (= (immSize I) 3)
    (; "Displacement value should be a 32bit integer.")
    )
    (? (= (immSize I) 4)
      (/ 0 2)
      (? (= (immSize I) 2)
        (/ 2 2)
        (/ (+ (immSize I) 1) 2)
      )
    )
  )
)

($ dispSize8 I
  (? (= (immSize I) 3)
    (; "Displacement value should be a 32bit integer.")
    )
    (? (= (immSize I) 4)
      (/ 1 2)
      (? (= (immSize I) 2)
        (/ 2 2)
        (/ (+ (immSize I) 1) 2)
      )
    )
  )
)

($ dispVal0 I
  (? (= (immSize I) 1)
    (immResize I 2)
    (immResize I (immSize I))
  )
)

($ dispVal8 I
  (? (= (immSize I) 4)
    (immResize I 1)
    (? (= (immSize I) 1)
      (immResize I 2)
      (immResize I (immSize I))
    )
  )
)

($ dispVal32 I
  (immResize I 2)
)

#Prefixes
($ preRex S R M
  (|
    (? (= (opSize S) (sizeQ)) (/ $48 8))
    (? (opExt R) (/ $44 8))
    (? (opExtI M) (/ $42 8))
    (? (opExt M) (/ $41 8))
    (? (| (regWithRexE R) (regWithRexE M)) (/ $40 8))
  )
)

($ psr S R M
  ('
    (? (= (opSize S) (sizeW)) (/ $66 8))
    (?
      (%
        (&
          (preRex S R M)
          $40
          (<
            (|
              (regWithoutRexE R)
              (regWithoutRexE M)
            )
            6
          )
        )
      )
      (; "AH-BH and REX prefix should not be in one instruction.")
      (preRex S R M)
    )
  )
)

(pr R M
  (psr M R M)
)

(p M
  (psr M 0 M)
)

#suffixes

($ rm R M
  (? (/ (> M 4) 1)
    (? (= (/ M 5) $14)
      (? (opMem M)
        (? (/ (> M 15) 1)
          ('
            (/ 0 2)
            (/ R 3)
            (/ 4 3)
            (/ (> M 32) 32)
          )
          (; "RIP should be used out of SIB.")
        )
        (; "RIP should be used as a pointer.")
      )
      ('
        (/ 0 2)
        (/ R 3)
        (/ 4 3)
        (/ (> M 13) 2)
        (/ (> M 8) 3)
        (/ 5 3)
        (dispVal32 (> M 32))
      )
    )
    (? (opMem M)
      (? (| (= (/ M 5) $4) (= (/ M 5) $C))
        (? (/ (> M 15) 1)
          ('
            (/ (dispSize0 (> M 32)) 2)
            (/ R 3)
            (/ 4 3)
            (/ (> M 13) 2)
            (/ (> M 8) 3)
            (/ 4 3)
            (dispVal0 (> M 32))
          )
          ('
            (/ 0 2)
            (/ R 3)
            (/ 5 3)
            (/ 0 2)
            (/ 4 3)
            (/ 5 3)
            (dispVal32 (> M 32))
          )
        )
        (? (| (= (/ M 5) $5) (= (/ M 5) $D))
          (? (/ (> M 15) 1)
            ('
              (/ (dispSize8 (> M 32)) 2)
              (/ R 3)
              (/ 4 3)
              (/ (> M 13) 2)
              (/ (> M 8) 3)
              (/ 5 3)
              (dispVal8 (> M 32))
            )
            ('
              (/ (dispSize8 (> M 32)) 2)
              (/ R 3)
              (/ 5 3)
              (dispVal8 (> M 32))
            )
          )
          (? (/ (> M 15) 1)
            ('
              (/ (dispSize0 (> M 32)) 2)
              (/ R 3)
              (/ 4 3)
              (/ (> M 13) 2)
              (/ (> M 8) 3)
              (/ M 3)
              (dispVal0 (> M 32))
            )
            ('
              (/ (dispSize0 (> M 32)) 2)
              (/ R 3)
              (/ M 3)
              (dispVal0 (> M 32))
            )
          )
        )
      )
      ('
        (/ 3 2)
        (/ R 3)
        (/ M 3)
      )
    )
  )
)

#Instructions

($ INC A
  ('
    (p A)
    (/ (| $FE (opWDQ A)) 8)
    (rm $0 A)
  )
)

($ DEC A
  ('
    (p A)
    (/ (| $FE (opWDQ A)) 8)
    (rm $1 A)
  )
)

($ ADD A B
  (? (opImm A)
    (; "Destination should not be an immediate value.")
    (? (opImm B)
      (? (= (/ B 64) 1)
        (INC A)
        (? (= (+ (/ B 64) 1) 0)
          (DEC A)
          (?
            (&
              (opAcc A)
              (!
                (&
                  (opWDQ A)
                  (= (/ (immSize B) 2) 0)
                )
              )
            )
            (? (opWDQ A)
              ('
                (p A)
                (/ $05 8)
                (immResize B (opSize A))
              )
              ('
                (/ $04 8)
                (/ B 8)
              )
            )
            (? (opWDQ A)
              (? (= (/ (immSize B) 2) 0)
                ('
                  (p A)
                  (/ $83 8)
                  (rm $0 A)
                  (/ B 8)
                )
                ('
                  (p A)
                  (/ $81 8)
                  (rm $0 A)
                  (immResize B (opSize A))
                )
              )
              ('
                (p A)
                (/ $80 8)
                (rm $0 A)
                (/ B 8)
              )
            )
          )
        )
      )
      (? (= (opSize A) (opSize B))
        (? (opReg A)
          ('
            (pr A B)
            (/ (| $02 (opWDQ A)) 8)
            (rm A B)
          )
          (? (opReg B)
            ('
              (pr B A)
              (/ (| $00 (opWDQ B)) 8)
              (rm B A)
            )
            (; "Instructions with two memory operands are invalid.")
          )
        )
        (; "Incompatible operand size.")
      )
    )
  )
)

($ CALdll F
  ('
    (CAL (mem (sizeD) (RIP) (- (dllFuncRel F) (tempLabel))))
    (* tempLabel)
    (, tempLable)
  )
)




