#vlrfsasm

($ exeMajorImageVer 1)
($ exeMinorImageVer 0)

($ resVersionString
  ('
    (~ (exeMajorImageVer) 10)
    "."
    (~ (exeMinorImageVer) 10)
  )
)

($ exeImportFuncTable
  ('
    (dllName "kernel32.dll")
    (dllFuncName "ExitProcess")
    (dllFuncName "GetProcessHeap")
    (dllFuncName "HeapAlloc")
    (dllFuncName "HeapFree")
    (dllFuncName "CreateFileW")
    (dllFuncName "ReadFile")
    (dllFuncName "WriteFile")
    (dllFuncName "CloseHandle")
    (dllFuncName "GetFileSize")
    (dllFuncName "GetCommandLineW")
    (dllFuncName "GetLocalTime")
    (dllName "user32.dll")
    (dllFuncName "MessageBoxW")
  )
)

($ ica A B C
  ('
    (iw A)
    (iw (- B C))
  )
)

(. (exeString)
  ('
    (* iCmdList)
    (ica "$" (fCmdDef) (iCmdList))
    (ica "+" (fCmdAdd) (iCmdList))
    (ica "-" (fCmdSub) (iCmdList))
    (ica "&" (fCmdAnd) (iCmdList))
    (ica "|" (fCmdOr) (iCmdList))
    (ica "^" (fCmdXor) (iCmdList))
    (ica "!" (fCmdNot) (iCmdList))
    (ica "<" (fCmdShl) (iCmdList))
    (ica ">" (fCmdShr) (iCmdList))
    (ica "%" (fCmdBool) (iCmdList))
    (ica "/" (fCmdWidth) (iCmdList))
    (ica "'" (fCmdConcat) (iCmdList))
    (ica "?" (fCmdIf) (iCmdList))
    (ica "*" (fCmdLabel) (iCmdList))
    (ica "@" (fCmdFirst) (iCmdList))
    (ica "," (fCmdEnum) (iCmdList))
    (ica ";" (fCmdError) (iCmdList))
    (ica "." (fCmdWrite) (iCmdList))
    (ica "_" (fCmdSize) (iCmdList))
    (iw 0)
    
    (* iErrorNoPath) (isn "Call me with a source file path.")
    (* iErrorNoFile) (isn "Unaccessable file:")
    (* iErrorEmpty) (isn "Empty parentheses:")
    (* iErrorUndef) (isn "Undefined name:")
    (* iErrorMes) (isn "Error:")
    (* iComplete) (isn "Complete:")
    (* iLine (isn "\n>Line: "))
    (* iTitle) (isn (' "Vlrfsasm v" (resVersionString) " | "))
  )
)

($ exeSizeOfStack $00010000)

($ memHeapHandle $00000000)
($ memEmpty $00000004)
($ memTokenNameAddress $00000010)
($ memLabelListAddress $00000014)
($ memTempTime $000000F0)
($ memMesTitle $00000100)
($ memDefStack $00000200)
($ memSizeOfDefStack $00000014) #[FuncToken:4], [FuncColumn:2], [FuncFile:2], [NumberOfArg:2], [ArgColumn:2], [ArgFile:2], [Type:1], [FirstArg:4]
($ memTempString $00007000)
($ memSizeOfTempString $00001000)
($ memMesText $00008000)
($ memCommandLine $0000E000)
($ memLogOfCommandLine 9) ($ memSizeOfCommandLine (> 1 memLogOfCommandLine))
($ memInputFile $00010000)
($ memInputText $00020000)
($ memOutputFile $00070000)
($ memTokenIndex $00080000)
($ memSizeOfTokenIndex $0000000C) #[NameAddress:4], [LabelList:4], [Count:2], [():2]{1<<i:i}
($ memTokenName $000C0000)
($ memDef $00100000)
($ memSizeOfDef $0000000C) #[Token:4], [Id:2], [Column:2], [File:2], [Type:2]{0:number,1:string,2:arg/name,3:deffunc,4+:func+numberOfArg}
($ memLabelList $00180000)
($ memSizeOfLabelList $00000014) #[NewVal:8], [OldVal:8], [Next:4]

($ exeSizeOfHeap $00200000)

(. (exeTXTSection)
  ('
    (SUB (RSP) (i $38))
    (MOV (RBP) (RSP))

    #Heap
    (CALdll "GetProcessHeap")
    (MOV (EBX) (EAX))
    (MOV (ECX) (EAX))
    (MOV (EDX) (i $08)) #HEAP_ZERO_MEMORY
    (MOV (R8D) (exeSizeOfHeap))
    (CALdll "HeapAlloc")
    (MOV (md (sizeD) (RAX) (memHeapHandle)) (EBX))
    (MOV (R13) (RAX))

    #Commandline
    (CALdll "GetCommandLineW")
    (MOV (RCX) (RAX))
    (LEA (RSI) (ld R13 (memCommandLine)))
    (MOV (RDX) (RSI))
    (MOV (BL) (i 0))
    
    (* pCL_0)
    (MOV (AX) (m (sizeW) (RDX)))
    (CMP (AH) (i 0))
    (JNE (pCL_1))
    (CMP (AL) (i 0))
    (JE (pCL_5))
    (CMP (AL) (i $22)) #"
    (JE (pCL_3))
    (CMP (BL) (i $01))
    (JE (pCL_1))
    (CMP (AL) (i $20)) #Space
    (JE (pCL_2))
    (* pCL_1)
    (MOV (m (sizeW) (RDX)) (AX))
    (ADD (RDX) (i 2))
    (JMP (pCL_4))
    (* pCL_2)
    (CMP (RDX) (RSI))
    (JE (pCL_4))
    (ADD (RSI) (i (memSizeOfCommandLine)))
    (MOV (RDX) (RSI))
    (JMP (pCL_4))
    (* pCL_3)
    (XOR (BL) (i $01))
    (* pCL_4)
    (ADD (RCX) (i 2))
    (JMP (pCL_0))
    (* pCL_5)
    
    (LEA (R14) (ld (R13) (+ (memCommandLine) (< (memSizeOfCommandLine) 1))))
    (CMP (md (sizeW) (R14)) (i 0))
    (JNE (pCL_6))
    (LEA (RCX) (ld (R13) (memMesText)))
    (LEAi (RDX) (iErrorNoPath))
    (CALf (fCyS))
    (JMP (pMes))
    (* pCL_6)

    #LoadFile
    #Takes over R14
    (LEA (R15) (ld (R13) (memInputText)))
    
    (* pLF_0)
    (MOV (RCX) (R14))
    (CMP (m (sizeW) (RCX)) (i 0))
    (JE (pLF_3))
    (MOV (EDX) (i $80000000))
    (MOV (R9D) (i 0))
    (LEA (R8D) (ld (R9) 1))
    (MOV (md (sizeD) (RBP) $20) (i $03))
    (MOV (md (sizeD) (RBP) $28) (R9D))
    (MOV (md (sizeD) (RBP) $30) (R9D))
    (CALdll "CreateFileW")
    (CMP (EAX) (i $FFFFFFFF))
    (JE (pLF_1))
    (MOV (EBX) (EAX))
    (MOV (ECX) (EAX))
    (MOV (EDX) (i 0))
    (CALdll "GetFileSize")
    (MOV (ECX) (EBX))
    (LEA (RDX) (ld (R13) (memInputFile)))
    (MOV (RDI) (RDX))
    (MOV (R8D) (EAX))
    (LEA (R9) (ld (R13) (memEmpty)))
    (MOV (RAX) (i 0))
    (MOV (md (sizeQ) (RBP) $20) (RAX))
    (CALdll "ReadFile")
    (MOV (ESI) (EAX))
    (MOV (ECX) (EBX))
    (CALdll "CloseHandle")
    (CMP (ESI) (i 0))
    (JNE (pLF_2))
    (* pLF_1)
    (LEA (RCX) (md (R13) (memMesText)))
    (LEAi (RDX) (iErrorNoFile))
    (CALf (fCyS))
    (MOV (RDX) (R14))
    (CALf (fCyS))
    (JMP (pMES))
    (* pLF_2)
    (MOV (RCX) (R15))
    (MOV (RDX) (RDI))
    (CALf (fCv8X))
    (MOV (m (sizeW) (RCX)) (i $001C))
    (LEA (R15) (ld (RCX) 2))
    (JMP (pLF_0))
    (* pLF_3)

    #CopyCommand
    (MOV (RCX) (i 0))
    (LEAi (RDX) (iCmdList))
    (LEA (RBX) (ld (R13) (memTokenIndex)))
    
    (* pCC_0)
    (MOV (EAX) (mi (sizeD) (RDX) (RCX)))
    (CMP (EAX) (i 0))
    (JE (pCC_1))
    (MOV (mid (sizeD) (R13) (RCX) (memTokenName)) (EAX))
    (MOV (m (sizeD) (RBX)) (ECX))
    (INC (md (sizeB) (RBX) 8))
    (MOV (md (sizeB) (RBX) 10) (i 3))
    (ADD (ECX) (i 4))
    (ADD (RBX) (i (memSizeOfTokenIndex)))
    
    (JMP (pCC_0))
    (* pCC_1)
    (MOV (mi (sizeD) (R13) (memTokenNameAddress)) (ECX))


    #SplitToken
    (MOV (BL) (i 0)) #0:Comment, 1:String, 2:Escape
    (LEA (RSI) (ld (R13) (memInputText)))
    (LEA (RDI) (ld (R13) (memTempString)))
    (MOV (R12) (i 0))
    (LEA (R14) (ld (R13) (memStack)))
    (LEA (R15) (ld (R13) (memDef)))
    
    (* pST_0)
    (MOV (AX) (m (sizeW) (RSI)))
    (CMP (AH) (i 0))
    (JNE (pST_1))
    (CMP (AL) (i 0))
    (JE (pST_@))
    (CMP (AL) (i $1C))
    (JE (pST_2))
    (CMP (AL) (i $0D))
    (JE (pST_3))
    (CMP (AL) (i $0A))
    (JE (pST_4))
    (TEST (BL) (i $04))
    (JZ (pST_5))
    (CMP (AL) (i "\""))
    (JE (pST_7))
    (CMP (AL) (i "\\"))
    (JE (pST_8))
    (TEST (BL) (i $02))
    (JNZ (pST_1))
    (CMP (AL) (i "("))
    (JE (pST_9))
    (CMP (AL) (i ")"))
    (JE (pST_A))
    (CMP (AL) (i $09))
    (JE (pST_@))
    (CMP (AL) (i " "))
    (JE (pST_@))
    (CMP (AL) (i "#"))
    (JE (pST_@))
    (* pSt_1)
    (MOV (m (sizeW) (RDI)) (AX))
    (ADD (RDI) (i 2))
    (JMP (pST_@))
    (* pST_2)
    (ADD (R12D) (i $00010000))
    (AND (R12D) (i $FFFF0000))
    (CALf (fCT))
    (JMP (pST_@))
    (* pST_3)
    (CMP (md (sizeW) (RSI) 2) (i $000A))
    (JNE (pST_3))
    (ADD (RSI) (i 2))
    (* pST_4)
    (INC (R12D))
    (AND (BL) (i $06))
    (JNZ (pST_1))
    (CALf (fCT))
    (JMP (pST_@))
    (* pST_5)
    (AND (BL) (i $03))
    (CMP (AX) (i "n"))
    (JNE (pST_1))
    (MOV (m (sizeD) (RDI)) (i $000A000D))
    (ADD (RDI) (i 4))
    (* pST_6)
    (MOV (md (sizeD) (R14) 10) (R12D))
    (JMP (pST_@)
    (* pST_7)
    (XOR (BL) (i $01))
    (TEST (BL) (i $01))
    (STNZ (md (sizeB) (R14) 14))
    (CALf (fCT))
    (JMP (pST_@))
    (* pST_8)
    (OR (BL) (i $04))
    (JMP (pST_@))
    (* pST_9)
    (CALf (fCT))
    (INC (md (sizeW) (R14) 8))
    (ADD (R14) (i (memSizeOfDefStack)))
    (MOV (md (sizeW) (R14) 8) (i 0))
    (JMP (pST_@))
    (* pST_A)
    (CALf (fCT))
    (CMP (md (sizeW) (R14) 8) (i 0))
    (JNE (pST_B))
    (LEA (RCX) (ld (R13) (memMesText)))
    (LEAi (RDX) (iErrorEmptyFunc))
    (CALf (fCyS))
    (MOV (EDX) (R12D))
    (CALf (fCvCS))
    (JMP (pMes))
    (* pST_B)
    (CMP (m (sizeD) (R14)) (i 0))
    (JEB (pST_C))
    ()
    


    #Message
    (* pMes)
    
    (LEA (RCX) (ld (R13) (memTempTime)))
    (MOV (RSI) (RCX))
    (CALdll "GetLocalTime")
    
    (LEA (RCX) (ld (R13) (memMesTitle)))
    (LEAi (RDX) (iTitle))
    (CALf (fCyS))
    
    (MOZ (EDX) (md (sizeW) (RSI) 2)) #Month
    (MOV (R8) (i $0A)) #Decimal
    (CALf (fCvIS))
    
    (MOV (m (sizeW) (RCX)) (i "/"))
    (ADD (RCX) (i 2))
    
    (MOZ (EDX) (md (sizeW) (RSI) 6)) #Day
    (CALf (fCvIS))
    
    (MOV (m (sizeW) (RCX)) (i " "))
    (ADD (RCX) (i 2))
    
    (MOZ (EDX) (md (sizeW) (RSI) 8)) #Hour
    (CALf (fCvIS))
    
    (MOV (m (sizeW) (RCX)) (i ":"))
    (ADD (RCX) (i 2))
    
    (MOZ (EDX) (md (sizeW) (RSI) 10)) #Minute
    (CALf (fCvIS))
    
    (MOV (RCX) (i 0))
    (LEA (RDX) (ld (R13) (memMesText)))
    (LEA (R8) (ld (R13) (memMesTitle)))
    (MOV (R9) (i 0))
    (CALdll "MessageBoxW")
    
    #Exit
    (MOV (ECX) (md (sizeD) (R13) (memHeapHandle)))
    (MOV (EDX) (i 0))
    (MOV (R8) (R13))
    (CALdll "HeapFree")
    
    (ADD (RSP) (i $38))
    (MOV (ECX) (i 0))
    (CALdll "ExitProcess")


    #funcCutToken R14:Stack,RDI:memtempStringEnd
    (* fCT)
    (LEA (RDX) (ld (R13) (memTempString)))
    (CMP (RDX) (RDI))
    (JNE (fCT_M))
    (RET)
    
    (* fCT_M)
    (CMP (md (sizeB) (R14) 14) (i 1))
    (JE (fCT_5))
    (MOV (AX) (RDX))
    (CMP (AH) (i 0))
    (JNE (fCT_2))
    (CMP (AL) (i "$"))
    (JE (fCT_0))
    (CMP (AL) (i "%"))
    (JE (fCT_0))
    (CMP (AL) (i "0"))
    (JB (fCT_5))
    (CMP (AL) (i "9"))
    (JBE (fCT_1))
    (JMP (fCT_5))
    (* fCT_0)
    (LEA (RCX) (ld (RDX) 2))
    (CMP (RCX) (RDI))
    (JE (fCT_5))
    (* fCT_1)
    (MOV (CL) (i 0))
    (CALf (fCvIS))
    (LEA (RCX) (ld (R13) (memTokenIndex)))
    (MOV (RDX) (i 0))
    (* fCT_2)
    (CMP (mid (sizeW) (RCX) (RDX) 8) (i 0)) #Count
    (JE (fCT_3))
    (MOV (R8D) (mi (sizeD) (RCX) (RDX)))
    (CMP (RAX) (mid (sizeQ) (R13) (R8D) (memTokenName)))
    (JE (fCT_4))
    (ADD (EDX) (i 2))
    (JMP (fCT_2))
    (* fCT_3)
    (MOV (R8D) (i 8))
    (XADD (md (sizeD) (R13) (memTokenNameAddress)) (R8D))
    (MOV (mid (sizeQ) (R13) (R8) (memTokenName)) (RAX))
    (MOV (mi (sizeD) (RCX) (RDX)) (R8D))
    (INC (mid (sizeB) (RCX) (RDX) 8))
    (* fCT_4)
    (MOV (mi (sizeD) (R15)) (EDX))
    (MOV (EDX) (mid (sizeD) (R14) 10))
    (MOV (mid (sizeD) (R15) 6) (EDX))
    (ADD (R15) (i (memSizeOfDef)))
    (JMP (fCT_B))
    (* fCT_5)
    (LEA (R8) (ld (R13) (memTokenIndex)))
    (MOV (R9D) (i 0))
    (LEA (R10) (ld (R13) (memTempString)))
    (LEA (R11) (ld (R13) (memTokenName)))
    (* fCT_6)
    (CMP (mid (sizeW) (R8) (R9) 8) (i 0))
    (JE (fCT_7))
    (MOV (EDX) (mi (sizeD) (R8) (R9)))
    (MOV (RCX) (R10))
    (MOV (RDX) (R11))
    (CALf (fCpS))
    (CMP (AL) (i 1))
    (JE (fCT_8))
    (ADD (R9D) (i (memSizeOfTokenIndex)))
    (JMP (fCT_6))
    (* fCT_7)
    (MOV (ECX) (md (sizeD) (R13) (memTokenNameAddress)))
    (MOV (mi (sizeD) (R8) (R9)) (ECX))
    (ADD (RCX) (R11))
    (MOV (RDX) (R10))
    (CALf (fCyS))
    (SUB (RCX) (R11))
    (ADD (ECX) (i 2))
    (MOV (md (sizeD) (R13) (memTokenNameAddress)) (ECX))
    (INC (mid (sizeD) (R8) (R9) 8))
    (* fCT_8)
    (CMP (md (sizeW) (R14) 8) (i 0))
    (JNE (fCT_9))
    (MOV (m (sizeD) (R14)) (R9D))
    (MOV (EAX) (mi (sizeD) (R14) 10))
    (MOV (md (sizeD) (R14) 4) (EAX))
    (MOV (md (sizeB) (R14) 8) (i 4))
    (JMP (fCT_C))
    (* fCT_9)
    (MOV (m (sizeD) (R15)) (R9D))
    (MOV (EAX) (md (sizeD) (R14) 10))
    (MOV (md (sizeD) (R15) 6) (EAX))
    (CMP (md (sizeB) (R14) 14) (i 1))
    (STNE (AL))
    (INC (AL))
    (MOV (AH) (i 0))
    (MOV (md (sizeW) (R15) 10) (AX))
    (CMP (m (sizeD) (R14)) (i 0))
    (JNE (fCT_B))
    (CMP (md (sizeW) (R14) 8) (i 3))
    
    (* fCT_B)
    (ADD (R15) (i (memSizeOfDef)))
    (* fCT_C)
    (LEA (RDI) (ld (R13) (memTempString)))
    (MOV (md (sizeD) (R14) 14))
    (RET)


    #funcCopyString [RCX]<-[RDX], RCX+
    (* fCyS)
    (MOV (AX) (m (sizeW) (RCX)))
    (CMP (AX) (i 0))
    (JE (fCyS_0))
    (MOV (m (sizeW) (RDX)) (AX))
    (ADD (RCX) (i 2))
    (ADD (RDX) (i 2))
    (JMP (fCyS))
    (* fCyS_0)
    (RET)


    #funcCompareString RAX<-([RCX]==[RDX]), RCX+, RDX+
    (* fCpS)
    (MOV (RAX) (i 0))
    (* fCpS_0)
    (MOV (AX) (m (sizeW) (RCX)))
    (CMP (AX) (m (sizeW) (RDX)))
    (JE (fCps_2))
    (CMP (AX) (i 0))
    (JE (fCpS_1))
    (ADD (RCX) (i 2))
    (ADD (RDX) (i 2))
    (JMP (fCpS_0))
    (* fCpS_1)
    (MOV (AL) (i 1))
    (* fCpS_2)
    (RET)


    #funcConvertIntegerToString [RCX]<-RDX{R8}, RCX+
    (* fCvIS)
    
    (MOV (RAX) (RDX))
    (LEA (R9) (ld (R13) (- (+ (memTempString) (memSizeOfTempString)) 2)))
    (MOV (R10) (R9)))
    (MOV (m (sizeW) (R9)) (i 0))
    
    (* fCvIS_0)
    (CMP (RAX) (i 0))
    (JE (fCvIS_2))
    (MOV (RDX) (i 0))
    (IDIV (R8))
    (ADD (DL) (i "0"))
    (CMP (DL) (i "9"))
    (JBE (fCvIS_1))
    (ADD (DL) (i (- "A" (+ "9" 1))))
    (* fCvIS_1)
    (SUB (R9) (i 2))
    (MOV (m (sizeW) (R9)) (DX))
    (JMP fCvIS_0)
    (* fCvIS_2)
    
    (MOV (RDX) (R9))
    (CALf (fCyS))
    
    (SUB (R10) (R9))
    (MOV (EAX) (R10D))
    (RET)


    #funcConvertUtf8ToUtf16 [RCX]<-[RDX]
    (* fCv8X)
    (MOV (EAX) (m (sizeD) (RDX)))
    (AND (EAX) (i $00FFFFFF))
    (CMP (EAX) (i $00BFBBEF))
    (JNE (pLF_3))
    (ADD (RDX) (i 3))
    (* fCv8X_0)
    (MOV (AL) (m (sizeB) (RDX)))
    (TEST (AL) (i $80))
    (JZ (fCv8X_5))
    (AND (AL) (i $3F))
    (MOV (AH) (i $02))
    (TEST (AL) (i $20))
    (JZ (fCv8X_1))
    (AND (AL) (i $1F))
    (INC (AH))
    (TEST (AL) (i $10))
    (JZ (fCv8X_1))
    (AND (AL) (i $0F))
    (INC (AH))
    (* fCv8X_1)
    (MOZ (EBX) (AL))
    (* fCv8X_2)
    (INC (RDX))
    (DEC (AH))
    (JZ (fCv8X_3))
    (SHL (EBX) (i 6))
    (MOV (AL) (m (sizeB) (RDX)))
    (AND (AL) (i $3F))
    (OR (BL) (AL))
    (JMP (fCv8X_2))
    (* fCv8X_3)
    (CMP (EBX) (i $00010000))
    (JB (fCv8X_4))
    (MOV (EAX) (EBX))
    (SHR (EAX) (i 10))
    (ADD (AX) (i $D7C0))
    (MOV (m (sizeW) (RCX)) (AX))
    (ADD (RCX) (i 2))
    (AND (BX) (i $03FF))
    (OR (BX) (i $DC00))
    (* fCv8X_4)
    (MOV (m (sizeW) (RCX)) (BX))
    (ADD (RCX) (i 2))
    (JMP (fCv8X_0))
    (* fCv8X_5)
    (MOZ (EBX) (AL))
    (CMP (AL) (i 0))
    (JE (fCv8X_6))
    (INC (RDX))
    (JMP (fCv8X_4))
    (* fCv8X_6)
    (MOV (m (sizeW) (RCX)) (BX))
    (RET)


    #funcConvertStringToInteger RAX<-[R13+memTempString]{CL}
    (* fCvSI)
    (LEA (R8) (ld (R13) (memTempString)))
    (MOZ (EAX) (m (sizeW) (R8)))
    (MOV (R9) (i 0))
    (AND (RCX) (i 1F))
    (CMP (CL) (i 1))
    (JA (fCvSI_2))
    (MOV (CL) (i $0A))
    (CMP (AX) (i "$"))
    (JNE (fCvSI_0))
    (MOV (CL) (i $10))
    (JMP (fCvSI_1))
    (* fCvSI_0)
    (CMP (AX) (i "%"))
    (JNE (fCvSI_2))
    (MOV (CL) (i $02))
    (* fCvSI_1)
    (ADD (R8) (i 2))
    
    (* fCvSI_2)
    (MOV (AX) (m (sizeW) (R8)))
    (CMP (AH) (i 0))
    (JNE (fCvSI_5))
    (CMP (AL) (i 0))
    (JE (fCvSI_6))
    (CMP (AL) (i "0"))
    (JB (fCvSI_5))
    (CMP (AL) (i "9"))
    (JA (fCvSI_3))
    (SUB (AL) (i "0"))
    (JMP (fCvSI_4))
    (* fCvSI_3)
    (CMP (AL) (i "A"))
    (JB (fCvSI_5))
    (CMP (AL) (i "F"))
    (JA (fCvSI_5))
    (SUB (AL) (i (- "A" $0A)))
    (* fCvSI_4)
    (XCHG (RAX) (R9))
    (MUL (RCX))
    (ADD (R9) (RAX))
    (* fCvSI_5)
    (ADD (R8) (i 2))
    (JMP (fCvSI_2))
    (* fCvSI_6)
    
    (MOV (RAX) (R9))
    (RET)
    
    
    #funcConvertColumnToString [RCX]<-EDX
    (* fCvCS)
    
    (MOV (m (sizeD) (RCX)) (i (is "\n")))
    (ADD (RCX) (i 4))
    (MOV (R11D) (EDX))
    (MOV (DX) (i 0))
    (SHR (EDX) (i (- 16 (memLogOfCommandLine))))
    (LEA (RDX) (lid (R13) (RDX) (memCommandLine)))
    (CALf (fCyS))
    (LEAi (RDX) (iLine))
    (CALf (fCyS))
    (MOZ (EDX) (R11W))
    (MOV (R8D) (i $0A))
    (CALf (fCvIS))
    (MOV (m (sizeD) (RCX)) (i (is " #")))
    (ADD (RCX) (i 4))
    (RET)
  )
)






